@page "/"
@inject EventService EventService

<h1>Welcome to EventEase</h1>
<p>Your one-stop solution for managing events effortlessly.</p>
<p>Explore upcoming events, manage your bookings, and connect with fellow attendees.</p>

@if (events == null)
{
    <p>Loading events...</p>
}
else
{
    <Virtualize Items="events" Context="eventItem">
        <EventCard Event="eventItem" />
    </Virtualize>
}

@code {
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEventsAsync();
    }
}

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
            <a href="/" class="btn btn-primary">Go to Home</a>
        </LayoutView>
    </NotFound>
</Router>

@inherits LayoutComponentBase

<div class="main-layout">
    <header>
        <h1>EventEase</h1>
        <nav>
            <ul>
                <li><NavLink href="/">Home</NavLink></li>
                <li><NavLink href="/eventdetails">Event Details</NavLink></li>
                <li><NavLink href="/registration">Registration</NavLink></li>
            </ul>
        </nav>
    </header>

    <main>
        @Body
    </main>

    <footer>
        <p>&copy; 2023 EventEase. All rights reserved.</p>
    </footer>
</div>

<style>
    .main-layout {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    header {
        background-color: #007bff;
        color: white;
        padding: 1rem;
    }

    nav ul {
        list-style-type: none;
        padding: 0;
    }

    nav ul li {
        display: inline;
        margin-right: 1rem;
    }

    main {
        flex: 1;
        padding: 1rem;
    }

    footer {
        background-color: #f8f9fa;
        text-align: center;
        padding: 1rem;
    }
</style>

@code {
    using Microsoft.AspNetCore.Components.Web;
    using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
    using EventEaseApp.Services;

    var builder = WebAssemblyHostBuilder.CreateDefault(args);
    builder.RootComponents.Add<App>("#app");

    builder.Services.AddScoped<EventService>();

    await builder.Build().RunAsync();
}

@page "/registration"
@inject EventService EventService

<h3>Event Registration</h3>

<EditForm Model="registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="registrationModel.Name" />
        <ValidationMessage For="@(() => registrationModel.Name)" />
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registrationModel.Email" />
        <ValidationMessage For="@(() => registrationModel.Email)" />
    </div>

    <div>
        <label for="event">Event:</label>
        <InputSelect id="event" @bind-Value="registrationModel.EventId">
            <option value="">Select an event</option>
            @foreach (var eventItem in events)
            {
                <option value="@eventItem.Id">@eventItem.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => registrationModel.EventId)" />
    </div>

    <button type="submit">Register</button>
</EditForm>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEventsAsync();
    }

    private void HandleValidSubmit()
    {
        // Handle the form submission
        Console.WriteLine("Form submitted successfully!");
    }

    public class RegistrationModel
    {
        [Required]
        public string Name { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public int EventId { get; set; }
    }
}